package com.dx.frame;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

import com.dx.CameraCore;
import com.dx.Person;
import com.dx.pojo.PersonCard;
import com.dx.pojo.Zkzdata;
import com.dx.util.Const;
import com.dx.util.ImagePanel;
import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.Variant;
import com.sun.media.sound.SoftTuning;

public class FacePhoFrame extends JFrame {

	private JPanel rightPanel = new JPanel();
	private JPanel leftPanel = new JPanel();
	private JMenuBar bar = new JMenuBar();

	private String shibieleixing = "";// 识别返回信息
	private Integer rzCount = 0;// 识别次数
	private Person person = null;
	private JDialog dialog = null;// 提示消息框
	private CameraCore camerPanel;
	private JPanel photoPanel;
	private JPanel infoPanel;
	private JLabel sfzLabel;
	private JLabel faceLabel;
	private JLabel zkzLabel;
	private JLabel text;
	private JScrollPane scrollPane;//
	private Boolean rightFlag = false;
	private BoxLayout boxLayout;
	private CardLayout cardLayout;
	private JPanel rightManagerPanel;
	ImagePanel rightImagePanel;
   
	public static void main(String[] args) {
		new FacePhoFrame();
	}

	public FacePhoFrame() {

		setBounds(0, 0, getScreenWidth(), getScreenHeight());
		setTitle("人脸采集认证");
		setLayout(new BorderLayout());

		// 设置bar上面的menu
		// JMenu menu = new JMenu("重新启动");
		// menu.setFont(new Font("微软雅黑", Font.PLAIN, 12));
		// bar.add(menu);
		// JButton button=new JButton("重新启动");
		// button.setFont(new Font("微软雅黑", Font.PLAIN, 12));
		// button.setPreferredSize(new Dimension(Const.BTN_WIDTH,Const.BAR_HEIGHT));
		// button.setFocusPainted(false);
		// bar.add(button,BorderLayout.WEST);
		// getContentPane().add(bar, BorderLayout.NORTH);
		// 设置bar
//		bar = new JMenuBar();
//		// bar.setBounds(0, 0, getWidth(),30);
//		bar.setPreferredSize(new Dimension(getWidth(), Const.BAR_HEIGHT));
//		bar.setLayout(new BorderLayout());

		// 设置panel初始化 放置照片和信息
        
	   
		
		
		
		
		
		// leftPanel放置摄像头
		leftPanel = new JPanel();
		leftPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.CAMER_PERCENT), (int) getHeight()));
		leftPanel.setLayout(new BorderLayout());
		// leftPanel.setLayout(new BorderLayout());
		// int leftPreWidth = (int) (leftPanel.getPreferredSize().getWidth() - 20);
		// int leftPreHeight=(int)leftPanel.getPreferredSize().getHeight();
		// int initCamHeight = (int) ((leftPanel.getPreferredSize().getWidth()) * 0.75);
		camerPanel = new CameraCore((int) (leftPanel.getPreferredSize().getHeight() * Const.HEIGHT_WIDTH_PERCENT
				* Const.CV_HEIGHT_WIDTH_PERCENT), (int) (leftPanel.getPreferredSize().getHeight()));
		camerPanel.setPreferredSize(new Dimension((int) leftPanel.getPreferredSize().getWidth() - Const.CV_MARGIN,
				(int) leftPanel.getPreferredSize().getHeight()));
		camerPanel.setVisible(true);
		leftPanel.add(camerPanel, BorderLayout.WEST);
		leftPanel.setVisible(true);
		getContentPane().add(leftPanel, BorderLayout.WEST);
		// -------------摄像头初始化结束-------------//
    
		//两个Jpanel切换管理
		cardLayout=new CardLayout(5,5);
		rightManagerPanel=new JPanel();
		rightManagerPanel.setLayout(cardLayout);
		rightManagerPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight()));
	    getContentPane().add(rightManagerPanel,BorderLayout.EAST);
		
	    
		//具体信息panel
		
		rightPanel = new JPanel();
		rightPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight()));
		boxLayout = new BoxLayout(rightPanel, BoxLayout.Y_AXIS);
		rightPanel.setLayout(boxLayout);
		// 定义rightpanel组件
		// 图片组件
		photoPanel = new JPanel();
		photoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
				(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_PERCENT)));
		photoPanel.setAlignmentX(CENTER_ALIGNMENT);
		photoPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
		// 定义图片组件内组件
		sfzLabel = new JLabel("");		
		sfzLabel.setPreferredSize(new Dimension(Const.PHOTO_SIZE, Const.PHOTO_SIZE));
		sfzLabel.setVisible(true);

		zkzLabel = new JLabel();
		zkzLabel.setPreferredSize(new Dimension(Const.PHOTO_SIZE, Const.PHOTO_SIZE));
		zkzLabel.setVisible(true);

		faceLabel = new JLabel();
		faceLabel.setPreferredSize(new Dimension(Const.PHOTO_SIZE, Const.PHOTO_SIZE));
		faceLabel.setVisible(true);

		text = new JLabel();
		text.setFont(new Font("Dialog", Font.BOLD, 16));
		text.setForeground(Color.red);

		
		
		
		photoPanel.add(sfzLabel);
		photoPanel.add(faceLabel);
		photoPanel.add(zkzLabel);
		photoPanel.add(text);
		photoPanel.setVisible(true);
		
		rightPanel.add(photoPanel);

		// 信息组件，放置准考证信息
		infoPanel = new JPanel();
		infoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
				(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_INFO_PERCENT)));
		infoPanel.setAlignmentX(CENTER_ALIGNMENT);
		infoPanel.setLayout(new FlowLayout(FlowLayout.CENTER));

		// infoPanel.setBackground(Color.GRAY);
		// 定义infoPanel子组件
		// 设置显示准考证的JTabel模式
		DefaultTableModel dftm = new DefaultTableModel() {
			@Override
			public boolean isCellEditable(int row, int column) {
				return false;
			}
		};
		String[] tableHeads = new String[] { "" };
		dftm.setColumnIdentifiers(tableHeads);
		// 准考证如何显示
		JTable table = new JTable(dftm);
		table.setRowHeight(25);
		table.getTableHeader().setVisible(false);
		table.setShowGrid(false);
		table.setShowHorizontalLines(false);
		table.setShowVerticalLines(false);
		table.setFont(new Font("Dialog", Font.PLAIN, 14));

		scrollPane = new JScrollPane(table);
		//scrollPane.setSize(new Dimension((int) infoPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
		//		(int) (infoPanel.getPreferredSize().getHeight() * Const.SCROLL_HEIGHT_PERCENT))); 
		
		scrollPane.setPreferredSize(new Dimension((int)infoPanel.getPreferredSize().getWidth()-Const.PREFERSIZE_MARGIN,(int) (infoPanel.getPreferredSize().getHeight()*Const.SCROLL_HEIGHT_PERCENT)));
         
		scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setBorder(null);
		scrollPane.setVisible(true);
		infoPanel.add(scrollPane);
		rightPanel.add(infoPanel);
        
		rightPanel.setVisible(true);
		rightManagerPanel.add(rightPanel, "rightpanel");
		
		//getContentPane().add(rightPanel, BorderLayout.EAST);
       
		
		//图片panel
		 rightImagePanel=new ImagePanel((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight());
	     rightImagePanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight()));
	
		 rightImagePanel.setVisible(true);		
		 rightManagerPanel.add(rightImagePanel,"rightImgpanel");
		// getContentPane().add(rightImagePanel,BorderLayout.EAST);
		
		
		if(!rightFlag) {
			cardLayout.show(rightManagerPanel,"rightImgpanel");
		}else {
			
			cardLayout.show(rightManagerPanel,"rightpanel");
			
		}
		
		// 监听身份证阅读器
		person = new Person();
		person.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {						
				if (evt.getPropertyName().equals("ischange")) {					
					rightFlag=(Boolean) evt.getNewValue();
					
					if(!rightFlag) {					
//						Timer timer=new Timer(true);
//						timer.schedule(new TimerTask() {
//							@Override
//							public void run() {
//							
//							}
//						}, 1500);
						cardLayout.show(rightManagerPanel,"rightImgpanel");
						
						
					}else {
						cardLayout.show(rightManagerPanel,"rightpanel");
						sfzLabel.setIcon(null);
						zkzLabel.setIcon(null);
						faceLabel.setIcon(null);
						text.setText("");
						camerPanel.flag = true;
						// 身份证读取
						PersonCard card = person.getCard1() == null ? person.getCard2() : person.getCard2();
						camerPanel.card = card;

						// 身份证号
						String upersonnum = card.getPnum();
						
						camerPanel.upersonnum = upersonnum;
						camerPanel.upersonname = card.getPname();
						// 将身份证照片显示到页面上
						File f = new File("");
						File file = new File(
								f.getAbsolutePath() + "\\faceimage\\" + upersonnum + "/" + upersonnum + "zp.bmp");// 身份证图像照片地址
						Image image = null;
						try {
							image = ImageIO.read(file);
						} catch (IOException e) {
							e.printStackTrace();
						}
						ImageIcon imageicon = new ImageIcon(image);
						imageicon.setImage(imageicon.getImage().getScaledInstance(Const.PHOTO_SIZE, Const.PHOTO_SIZE,
								Image.SCALE_DEFAULT));// 固定照片大小
						sfzLabel.setIcon(imageicon);

						
					}
					
					
				
				}
			}
		});
         
		// cameraPanel属性值监听
		camerPanel.addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent evt) {
				if (evt.getPropertyName().equals("filepath")) {
					String imgpath = evt.getNewValue() + "";
					// 将new 图片添加到panel2中显示
					imgpath = imgpath.replaceAll("\\\\", "//");
					ImageIcon imageicon = new ImageIcon(imgpath);
					imageicon.setImage(imageicon.getImage().getScaledInstance(Const.PHOTO_SIZE, Const.PHOTO_SIZE,
							Image.SCALE_DEFAULT));// 固定照片大小
					faceLabel.setIcon(imageicon);
					text.setText("");
				} else if (evt.getPropertyName().equals("types")) {
					Boolean b = (Boolean) evt.getNewValue();
				
					if (b) {
						
						Integer c1 = dftm.getRowCount();
						scrollPane.setVisible(false);
						for (int i = 0; i < c1; i++) {
							dftm.removeRow(0);
						}
					}

				} else if (evt.getPropertyName().equals("shibieleixing")) {			
					shibieleixing = (String)evt.getNewValue();// 认证返回信息
					// 获取检验的结果并显示到页面上
					if ("非考生".equals(shibieleixing)) {
						text.setText(shibieleixing);
					} else if (("需人工审核".equals(shibieleixing))) {
						text.setText("需人工审核");// shibieleixing
					} else if ("姓名不一致".equals(shibieleixing)) {
						//System.out.println(shibieleixing);
						text.setText(shibieleixing);
					} else if ((!"通过".equals(shibieleixing))) {
						text.setText(shibieleixing);// shibieleixing
						// 将上一张准考证显示的内容清空
						for (int i = 0; i < dftm.getRowCount(); i++) {
							dftm.removeRow(0);
						}
					} else if ("通过".equals(shibieleixing)) {
						text.setText("通过");// shibieleixing
					}
					//System.out.println(shibieleixing+"-----------");
					// showSheng(shibieleixing);//语音播报结果

				} else if (evt.getPropertyName().equals("zkzdata")) {
					text.setText("");
					Integer c1 = dftm.getRowCount();
					scrollPane.setVisible(false);
					for (int i = 0; i < c1; i++) {
						dftm.removeRow(0);
					}

					Zkzdata zkz = (Zkzdata) evt.getNewValue();
					//System.out.println(zkz.toString());
					
					File f = new File("");
					String imgpath = f.getAbsolutePath() + "\\zkzpho\\" + zkz.getUpersonnum() + ".JPG";
					// 将new 图片添加到panel2中显示
					imgpath = imgpath.replaceAll("\\\\", "//");
					ImageIcon imageicon = new ImageIcon(imgpath);
					imageicon.setImage(imageicon.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));// 固定照片大小
					zkzLabel.setIcon(imageicon);

					String[] row1 = new String[] { " 姓名：" + zkz.getXingming() + "                            性别："
							+ zkz.getXingbie() + "                           年龄：" + zkz.getNianlin() };
					dftm.addRow(row1);
					String[] row2 = new String[] { " 准考证号：" + zkz.getZkznum() };
					dftm.addRow(row2);
					String[] row3 = new String[] { " 身份证号：" + zkz.getUpersonnum() };
					dftm.addRow(row3);
					String[] row4 = new String[] { " 工作单位：" + zkz.getDanweiname() };
					dftm.addRow(row4);
					String[] row5 = new String[] { " 申报工种：" + zkz.getBaokaoname() };
					dftm.addRow(row5);
					String[] row6 = new String[] { " 申报等级：" + zkz.getJbname() };
					dftm.addRow(row6);

					if (!"".equals(zkz.getKc1())) {
						String[] row7 = new String[] { "                 考场：" + zkz.getKd1() + "" + zkz.getKc1()
								+ "                    坐号：" + zkz.getZh1() };
						dftm.addRow(row7);
						String[] row8 = new String[] { " 职业道德: 考试时间：" + zkz.getSj1() };
						dftm.addRow(row8);
						String[] row9 = new String[] { "                 考试地点：" + zkz.getDd1() };
						dftm.addRow(row9);
					}
					if (!"".equals(zkz.getKc2())) {
						String[] row7 = new String[] { "                 考场：" + zkz.getKd2() + "" + zkz.getKc2()
								+ "                    坐号：" + zkz.getZh2() };
						dftm.addRow(row7);
						String[] row8 = new String[] { " 职业能力: 考试时间：" + zkz.getSj2() };
						dftm.addRow(row8);
						String[] row9 = new String[] { "                 考试地点：" + zkz.getDd2() };
						dftm.addRow(row9);
					}
					if (!"".equals(zkz.getKc3())) {
						String[] row7 = new String[] { "                 考场：" + zkz.getKd3() + "" + zkz.getKc3()
								+ "                    坐号：" + zkz.getZh3() };
						dftm.addRow(row7);
						String[] row8 = new String[] { " 岗位技能: 考试时间：" + zkz.getSj3() };
						dftm.addRow(row8);
						String[] row9 = new String[] { "                 考试地点：" + zkz.getDd3() };
						dftm.addRow(row9);
					}
			       // System.out.println(zkz);
					scrollPane.setVisible(true);
				}

			}
		});
          
		// 设置frame，不要最先设置
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);

		// //button监听
		// button.addActionListener(new ActionListener() {
		// @Override
		// public void actionPerformed(ActionEvent e) {
		//
		// person=new Person();
		//
		//
		// }
		//
		//
		// });
		// 监听frame尺寸变化
		addComponentListener(new ComponentAdapter() {
			@Override
			public void componentResized(ComponentEvent e) {
			    //System.out.println("frame变化：" + getWidth() + "---" + getHeight());
				bar.setPreferredSize(new Dimension(getWidth(), Const.BAR_HEIGHT));
				rightPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
				rightImagePanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
				rightManagerPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight()));
				leftPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.CAMER_PERCENT), getHeight()));
				photoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
						(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_PERCENT)));
				infoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
						(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_INFO_PERCENT)));
				scrollPane.setPreferredSize(
						new Dimension((int) infoPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
								(int) (infoPanel.getPreferredSize().getHeight() * Const.SCROLL_HEIGHT_PERCENT)));

				camerPanel.setPreferredSize(
						new Dimension((int) leftPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
								(int) leftPanel.getPreferredSize().getHeight()));		
				repaint();
			}

			// 鼠标拖动窗口事件
			@Override
			public void componentMoved(ComponentEvent e) {
				bar.setPreferredSize(new Dimension(getWidth(), Const.BAR_HEIGHT));
				rightPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
				rightImagePanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
				rightManagerPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight()));
				leftPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.CAMER_PERCENT), getHeight()));
				photoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
						(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_PERCENT)));
				infoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
						(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_INFO_PERCENT)));
				scrollPane.setPreferredSize(
						new Dimension((int) infoPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
								(int) (infoPanel.getPreferredSize().getHeight() * Const.SCROLL_HEIGHT_PERCENT)));
				camerPanel.setPreferredSize(
						new Dimension((int) leftPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
								(int) leftPanel.getPreferredSize().getHeight()));
				table.setVisible(true);
				scrollPane.setVisible(true);
				repaint();
			}

			// 鼠标点击标题还原事件
			@Override
			public void componentShown(ComponentEvent e) {
				bar.setPreferredSize(new Dimension(getWidth(), Const.BAR_HEIGHT));
				rightPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
				rightImagePanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
				rightManagerPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight()));
				leftPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.CAMER_PERCENT), getHeight()));
				photoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
						(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_PERCENT)));
				infoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
						(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_INFO_PERCENT)));
				scrollPane.setPreferredSize(
						new Dimension((int) infoPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
								(int) (infoPanel.getPreferredSize().getHeight() * Const.SCROLL_HEIGHT_PERCENT)));
				camerPanel.setPreferredSize(
						new Dimension((int) leftPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
								(int) leftPanel.getPreferredSize().getHeight()));
				scrollPane.setVisible(true);
				repaint();
			}

		});

		// 监听窗口状态
		addWindowStateListener(new WindowStateListener() {

			@Override
			public void windowStateChanged(WindowEvent e) {
				if (e.getNewState() == 6) {// 窗口最大化
					bar.setPreferredSize(new Dimension(getWidth(), Const.BAR_HEIGHT));
					rightPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
					rightImagePanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
					rightManagerPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight()));
					leftPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.CAMER_PERCENT), getHeight()));
					photoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
							(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_PERCENT)));
					infoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
							(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_INFO_PERCENT)));
					scrollPane.setPreferredSize(
							new Dimension((int) infoPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
									(int) (infoPanel.getPreferredSize().getHeight() * Const.SCROLL_HEIGHT_PERCENT)));
					camerPanel.setPreferredSize(
							new Dimension((int) leftPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
									(int) leftPanel.getPreferredSize().getHeight()));
					scrollPane.setVisible(true);
					repaint();

				} else if (e.getNewState() == 0) {// 窗口还原
					bar.setPreferredSize(new Dimension(getWidth(), Const.BAR_HEIGHT));
					rightPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
					rightImagePanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), getHeight()));
					rightManagerPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.INFO_PERCENT), (int) getHeight()));
					leftPanel.setPreferredSize(new Dimension((int) (getWidth() * Const.CAMER_PERCENT), getHeight()));
					photoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
							(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_PERCENT)));
					infoPanel.setPreferredSize(new Dimension((int) rightPanel.getPreferredSize().getWidth(),
							(int) (rightPanel.getPreferredSize().getHeight() * Const.PHOTO_INFO_PERCENT)));
					scrollPane.setPreferredSize(
							new Dimension((int) infoPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
									(int) (infoPanel.getPreferredSize().getHeight() * Const.SCROLL_HEIGHT_PERCENT)));
					camerPanel.setPreferredSize(
							new Dimension((int) leftPanel.getPreferredSize().getWidth() - Const.PREFERSIZE_MARGIN,
									(int) leftPanel.getPreferredSize().getHeight()));
					scrollPane.setVisible(true);
					repaint();
				} else if (e.getNewState() == 1 || e.getNewState() == 7) {// 窗口最小化

				}

			}
		});

		// 监听frame下组件尺寸变化，用不上

		// // panel变化
		// rightPanel.addComponentListener(new ComponentAdapter() {
		// @Override
		// public void componentResized(ComponentEvent e) {
		// }
		//
		// });

		// 此事件虽然监听窗口改变但是，直接通过frame相关事件修改就行所以不需要
		// leftPanel.addComponentListener(new ComponentAdapter() {
		//
		// @Override
		// public void componentResized(ComponentEvent e) {
		// camerPanel.setPreferredSize(new
		// Dimension((int)(leftPanel.getPreferredSize().getWidth()-20),(int)(leftPanel.getPreferredSize().getWidth()*0.75)));
		// }
		// });

	}

	private static int getScreenWidth() {
		return (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
	}

	private static int getScreenHeight() {
		return (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();

	}

	// 语音播报
	public static void showSheng(String str) {
		ActiveXComponent sap = new ActiveXComponent("Sapi.SpVoice");
		// Dispatch是做什么的？
		Dispatch sapo = sap.getObject();
		try {

			// 音量 0-100
			sap.setProperty("Volume", new Variant(100));
			// 语音朗读速度 -10 到 +10
			sap.setProperty("Rate", new Variant(0));

			Variant defalutVoice = sap.getProperty("Voice");

			Dispatch dispdefaultVoice = defalutVoice.toDispatch();
			Variant allVoices = Dispatch.call(sapo, "GetVoices");
			Dispatch dispVoices = allVoices.toDispatch();

			Dispatch setvoice = Dispatch.call(dispVoices, "Item", new Variant(1)).toDispatch();
			ActiveXComponent voiceActivex = new ActiveXComponent(dispdefaultVoice);
			ActiveXComponent setvoiceActivex = new ActiveXComponent(setvoice);

			Variant item = Dispatch.call(setvoiceActivex, "GetDescription");
			// 执行朗读
			Dispatch.call(sapo, "Speak", new Variant(str));// "曾小明小朋友，早上好"

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sapo.safeRelease();
			sap.safeRelease();
		}
	}

	// 下面是打开摄像头和打开身份证阅读器
	// facepanel = new FacePhoPanel();

	// panel = facepanel.getFacePhoPanel();
	// facepanel.getPerson();
	// getContentPane().add(panel);
	// setVisible(true);

	//
	// reSizeEvent dg = new reSizeEvent(this, facepanel.getPanel1().getCamera());
	// /**添加两个监听器**/
	// addMouseListener(dg);
	// addMouseMotionListener(dg);

	// 关闭窗口事件
	// addWindowListener(new WindowAdapter() {
	// public void windowClosing(WindowEvent e) {
	// try {
	// if(panel != null) {
	// //getContentPane().remove(panel);//清空里面的内容,重新添加可能速度很慢
	// panel.updateUI();//建议用法
	// repaint();
	// if(facepanel != null && facepanel.getPanel1() != null &&
	// facepanel.getPanel1().getMainThread() != null) {
	// Thread mainThread = facepanel.getPanel1().getMainThread() ;
	// facepanel.getPanel1().getCamera().release();
	// facepanel.getPerson().closePerson();
	// facepanel.getPanel1().setMat(new Mat());
	// facepanel.getPanel1().setImage();
	// mainThread.interrupt();//摄像头线程中止
	// }
	// }
	// } catch (Exception ion) {
	// System.out.println("摄像头或其线程中止报错");
	// }
	// //上面停止摄像头，下面销毁当前对象
	//
	//
	//
	// }

	// });

}
