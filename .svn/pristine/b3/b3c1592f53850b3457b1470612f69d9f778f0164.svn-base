package com.dx.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.dx.dao.DBHelper;
import com.dx.inter.FaceLogsInterface;
import com.dx.pojo.FaceLog;
import com.dx.pojo.FaceLogAndZkzResult;
import com.dx.pojo.Zkzdata;
import com.dx.query.IResultHandler;
import com.dx.query.PageResult;
import com.dx.util.Const;
import com.fr.process.pdl.task.StartTask;
import com.sun.org.apache.bcel.internal.generic.NEW;

public class FaceLogsImpl implements FaceLogsInterface {
	private DBHelper dbdao = new DBHelper();
	private Connection conn = null;;
	private ResultSet res = null;

	
    //查询所有考点
	@Override
	public List<String> getKd() {
		String sql="SELECT DISTINCT(kaodianname) FROM paramsetup";
		List<String> kaodian=DBHelper.getResult(sql,new IResultHandler<List<String>>() {
            
			@Override
			public List<String> handler(ResultSet rs) throws Exception {
				List<String> kdList=new ArrayList<>();
				kdList.add("请选择");
			   while(rs.next()) {
				   kdList.add(rs.getString("kaodianname"));
				   
			   }
				return kdList;
			}
		});	
		return kaodian;
	}
	//查询所有考场
	@Override
	public List<String> getKc() {
		String sql="SELECT DISTINCT(kaochang) FROM paramsetup";
		List<String> kaochang=DBHelper.getResult(sql,new IResultHandler<List<String>>() {

			@Override
			public List<String> handler(ResultSet rs) throws Exception {
				List<String> kcList=new ArrayList<>();
				kcList.add("请选择");
			   while(rs.next()) {
				   kcList.add(rs.getString("kaochang"));
				   
			   }
				return kcList;
			}
		});	
		return kaochang;
	}
	
	
	
	@Override
	public Zkzdata getZkzdataBysfzNum(String sfzNum) {
		Zkzdata zkzdata=new Zkzdata();
		// TODO Auto-generated method stub
		if(sfzNum!=null&&sfzNum.trim()!="") {
			String sql="SELECT * FROM zkzdata WHERE  upersonnum="+sfzNum;
			zkzdata=DBHelper.getResult(sql, new IResultHandler<Zkzdata>() {
				public Zkzdata handler(ResultSet rs) throws Exception {
					Zkzdata zdata=new Zkzdata();
					if(rs.next()) {
						zdata.setId(rs.getInt(1));
                        zdata.setXingming(rs.getString(2));
                        zdata.setXingbie(rs.getString(3));
                        zdata.setNianlin(rs.getString(4));
						zdata.setZkznum(rs.getString(5));
						zdata.setUpersonnum(rs.getString(6));
						zdata.setDanweiid(rs.getString(7));
						zdata.setDanweiname(rs.getString(8));
						zdata.setBaokaocode(rs.getString(9));
						zdata.setBaokaoname(rs.getString(10));
                        zdata.setJbcode(rs.getString(11));
                        zdata.setJbname(rs.getString(12));
                        zdata.setKd1(rs.getString(13));
                        zdata.setKc1(rs.getString(14));
                        zdata.setZh1(rs.getString(15));
                        zdata.setSj1(rs.getString(16));
                        zdata.setDd1(rs.getString(17));
                        zdata.setKd2(rs.getString(18));
                        zdata.setKc2(rs.getString(19));
                        zdata.setZh2(rs.getString(20));
                        zdata.setSj2(rs.getString(21));
                        zdata.setDd2(rs.getString(22));
                        zdata.setKd3(rs.getString(23));
                        zdata.setKc3(rs.getString(24));
                        zdata.setZh3(rs.getString(25));
                        zdata.setSj3(rs.getString(26));
                        zdata.setDd3(rs.getString(27));
                        zdata.setZmarks(rs.getString(28));
                        zdata.setDishiname(rs.getString(29));                        
                        zdata.setZkzpho(rs.getString(30));
                        zdata.setSfzpho(rs.getString(31));
        
					}		
					// TODO Auto-generated method stub
					return  zdata;
				}
			});
						
		}
		
		
		return zkzdata;
	}
	
	@Override
	public int insertFaceLogs(FaceLog faceLog) {
		Connection conn = DBHelper.getConn();
		int num = 0;
		String sql = "insert into facelog(sfz,xingming,xingbie,shibieleixing,"
				+ "shibieleixingint,shijian,renlianphoto,sfzphoto,remarks,changci,denglumana,renzcount) values("
				+ "?,?,?,?,?,?,?,?,?,?,?,?)";
		PreparedStatement pstmt = null;
		try {
			pstmt = (PreparedStatement) conn.prepareStatement(sql);
			pstmt.setString(1, faceLog.getSfz());
			pstmt.setString(2, faceLog.getXingming());
			pstmt.setString(3, faceLog.getXingbie());
			pstmt.setString(4, faceLog.getShibieleixing());
			pstmt.setString(5, faceLog.getShibieleixingint());
			pstmt.setString(6, faceLog.getShijian());
			pstmt.setString(7, faceLog.getRenlianphoto());
			pstmt.setString(8, faceLog.getSfzphoto());
			pstmt.setString(9, faceLog.getRemarks());
			pstmt.setString(10, faceLog.getChangci());
			pstmt.setString(11, faceLog.getDenglumana());
			pstmt.setString(12, faceLog.getRenzcount());
			num = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBHelper.close(conn, pstmt);
		}
		return num;
	}

	public static void main(String[] args) {
		FaceLog faceLog = new FaceLog();
		faceLog.setSfz("411502199009184511");
		faceLog.setXingming("葛开存");
		faceLog.setXingbie("男");
		faceLog.setShibieleixing("非考生");
		faceLog.setShibieleixingint("1");
		faceLog.setShijian("2018-11-13 10:35:25");
		faceLog.setRenlianphoto("D:\\faceimages\\faceimage");
		faceLog.setSfzphoto("D:\\faceimages/faceimage/20181222521.jpg");
		FaceLogsInterface impl = new FaceLogsImpl();
		System.out.println(impl.insertFaceLogs(faceLog));
	}
	//验证是否是当场考试
	
	@Override
	public Boolean getIsExitORnot(String upersonnum) {
		Boolean flag=false;
		String sql="SELECT upersonnum FROM zkzdata WHERE upersonnum="+upersonnum;
		flag=DBHelper.getResult(sql, new IResultHandler<Boolean>() {

			@Override
			public Boolean handler(ResultSet rs) throws Exception {
				Boolean f=false;
				if(rs.next()) {
					f=true;
				}
				
				return f;
			}
		});
		return flag;
	}
	
	//获取验证次数和是否通过
	@Override
	public Map<String, Object> getLastSucessFaceLogRzcountAndFlag(String upersonnum, String curchangci) {
		Map<String, Object> rsMap=new HashMap<>();
		String sql="select * from facelog where sfz='" + upersonnum + "' and changci='" + curchangci
				+ "' AND shibieleixingint='7'  ORDER BY id  LIMIT 1";		  
		     FaceLog faceLogSuc=DBHelper.getResult(sql, new IResultHandler<FaceLog>() {
				@Override
				public FaceLog handler(ResultSet rs) throws Exception {
					FaceLog facelog=null;
					if(rs.next()) {
						facelog=new FaceLog();
						facelog.setId(Integer.parseInt(rs.getString(1)));
						facelog.setSfz(rs.getString(2));
						facelog.setXingming(rs.getString(3));
						facelog.setXingbie(rs.getString(4));
						facelog.setShibieleixing(rs.getString(5));
						facelog.setShibieleixingint(rs.getString(6));
						facelog.setShijian(rs.getString(7));
						facelog.setRenlianphoto(rs.getString(8));
						facelog.setRemarks(rs.getString(9));
						facelog.setSfzphoto(rs.getString(10));
						facelog.setChangci(rs.getString(11));
						facelog.setDenglumana(rs.getString(12));
						facelog.setRenzcount(rs.getString(13));
						
					}
					return facelog;
				}
			});
		    if(faceLogSuc!=null) {	
		    	if(faceLogSuc.getRenzcount()!=null) {
		    		rsMap.put("rzCount",Integer.valueOf(faceLogSuc.getRenzcount()));
		    		rsMap.put("rzFlag", true);
		    		return rsMap;		    		
		    	}
		    	rsMap.put("rzCount",1);
	    		rsMap.put("rzFlag", true);   	
		    	return rsMap;
		    }
		   String sql2="select COUNT(*) from facelog where sfz='" + upersonnum + "' and changci='" + curchangci
					+ "' AND shibieleixingint !='7' ";	  
		   Integer rz=DBHelper.getResult(sql2,new IResultHandler<Integer>() {
			@Override
			public Integer handler(ResultSet rs) throws Exception {
				if(rs.next()) {				
					return rs.getInt(1)+1;					
				}
				return 1;
			}
		});
		   		
		rsMap.put("rzCount",rz);
    	rsMap.put("rzFlag", false);    		   
		return rsMap;
	}
	
	
	
	//获取某人认正条数
	
	@Override
	public Integer getLastSucessFaceLogRzcount(String upersonnum, String curchangci) {
		String sql="select * from facelog where sfz='" + upersonnum + "' and changci='" + curchangci
				+ "' AND shibieleixingint='7'  ORDER BY id  LIMIT 1";
		   System.out.println(sql);
		     FaceLog faceLogSuc=DBHelper.getResult(sql, new IResultHandler<FaceLog>() {
				@Override
				public FaceLog handler(ResultSet rs) throws Exception {
					FaceLog facelog=null;
					if(rs.next()) {
						facelog=new FaceLog();
						facelog.setId(Integer.parseInt(rs.getString(1)));
						facelog.setSfz(rs.getString(2));
						facelog.setXingming(rs.getString(3));
						facelog.setXingbie(rs.getString(4));
						facelog.setShibieleixing(rs.getString(5));
						facelog.setShibieleixingint(rs.getString(6));
						facelog.setShijian(rs.getString(7));
						facelog.setRenlianphoto(rs.getString(8));
						facelog.setRemarks(rs.getString(9));
						facelog.setSfzphoto(rs.getString(10));
						facelog.setChangci(rs.getString(11));
						facelog.setDenglumana(rs.getString(12));
						facelog.setRenzcount(rs.getString(13));
						
					}
					return facelog;
				}
			});
		    if(faceLogSuc!=null) {	
		    	if(faceLogSuc.getRenzcount()!=null) {
		    		return Integer.valueOf(faceLogSuc.getRenzcount());		    		
		    	}
		    	return 1;
		    }
		   String sql2="select COUNT(*) from facelog where sfz='" + upersonnum + "' and changci='" + curchangci
					+ "' AND shibieleixingint !='7' ";
		   System.out.println(sql2);
		   Integer rz=DBHelper.getResult(sql2,new IResultHandler<Integer>() {
			@Override
			public Integer handler(ResultSet rs) throws Exception {
				if(rs.next()) {				    
					return rs.getInt(1)+1;					
				}
				return 1;
			}
		});
		   		
		return rz;
	}
	 
	
    //获取某人再facelog最后一条记录
	@Override
	public FaceLog getLastFaceLog(String upersonnum, String curchangci) {
		Connection conn = DBHelper.getConn();
		String sql = "select * from facelog where sfz='" + upersonnum + "' and changci='" + curchangci
				+ "'  ORDER BY id DESC LIMIT 1";
		PreparedStatement pstmt = null;
		FaceLog facelog = new FaceLog();
		try {
			pstmt = (PreparedStatement) conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				facelog.setId(Integer.parseInt(rs.getString(1)));
				facelog.setSfz(rs.getString(2));
				facelog.setXingming(rs.getString(3));
				facelog.setXingbie(rs.getString(4));
				facelog.setShibieleixing(rs.getString(5));
				facelog.setShibieleixingint(rs.getString(6));
				facelog.setShijian(rs.getString(7));
				facelog.setRenlianphoto(rs.getString(8));
				facelog.setRemarks(rs.getString(9));
				facelog.setSfzphoto(rs.getString(10));
				facelog.setChangci(rs.getString(11));
				facelog.setDenglumana(rs.getString(12));
				facelog.setRenzcount(rs.getString(13));
			}
			if (facelog.getId() == null) {
				facelog = null;
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBHelper.close(conn, pstmt);
		}
		return facelog;
	}

	@Override
	public String[] getRenzCount() {
		String[] renzcounts = new String[] {};
		try {
			conn = dbdao.getConn();
			String sql = "select distinct count(*) rzcount from facelog where renzcount is not null group by sfz order by rzcount";
			res = dbdao.getResults(conn, sql);
			List<String> list = new ArrayList<>();
			list.add("请选择");
			while (res.next()) {
				String kc = res.getString(1);
				list.add(kc);
			}
			renzcounts = list.toArray(new String[list.size()]);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbdao.close(conn);
		}
		return renzcounts;
	}
	
	@Override
	public PageResult getFaceLogsByPageCondition(String rzresult, String changci, 
			String kaodian,String kaochang,String startime,Integer currentPage) {
		
		//外层zkzdata
		String baseSql = "SELECT z.id, z.xingming,z.xingbie,z.upersonnum,f.changci,z.baokaoname,z.jbname,z.kc1,z.zh1,z.zkznum,f.shijian,f.shibieleixing,f.renzcount,f.renlianphoto,f.sfzphoto   FROM zkzdata z  JOIN  " ;
		String zkzSql="";
		String zkzdataSql="";
		//拼接内层facelogsql
		String faceSql="";
		String dataSql="";
		
		String countSql="SELECT COUNT(*)  FROM zkzdata z  JOIN ";
		

		if (startime != null && !"".equals(startime)) {
			 dataSql="";
			 zkzdataSql="";
             if(startime.length()>16) {
            	startime=startime.substring(0, 16);//具体到分
			 }else if(startime.length()>13) {
				 startime=startime.substring(0, 13); //具体到时
				 
			 } else if(startime.length()>10) {
				 startime=startime.substring(0, 10);//具体到天
			 }
			
			 dataSql=" AND f1.shijian LIKE '%"+startime+"%' ";
			 zkzdataSql="AND z.sj1 LIKE '%"+startime+"%' ";
		}

		
		if(changci!=null&& !"".equals(changci)) {
			
			if(!"".equals(dataSql)) {
				dataSql+=" AND f1.changci= '"+changci+"' ";		
			}else {
				dataSql=" AND f1.changci= '"+changci+"' ";				
			}
		}
		
		
		if(rzresult!=null&&!"".equals(rzresult)) {
			faceSql="";
			if("需审核".equals(rzresult)) {				
			 faceSql=" ( SELECT * FROM (SELECT * FROM facelog WHERE shibieleixingint IS '1' OR shibieleixingint IS '4' GROUP BY sfz ORDER BY  shijian DESC) f1  WHERE  f1.sfz NOT IN (SELECT sfz FROM facelog WHERE shibieleixingint IS '7' GROUP BY sfz  ) "+dataSql+" ORDER BY f1.shijian  ) f ";
			
			}else if("不通过".equals(rzresult)) {
				
			faceSql=" ( SELECT * FROM (SELECT * FROM facelog WHERE shibieleixingint IS NOT '7' AND shibieleixingint IS NOT '2'  GROUP BY sfz ORDER BY shijian DESC " + 
					") f1  WHERE  f1.sfz NOT IN (SELECT sfz FROM facelog WHERE shibieleixingint IS '7' GROUP BY sfz ORDER BY  shijian ) "+dataSql+" ) f ";
			
			}else if("通过".equals(rzresult)) {
				faceSql=" (SELECT * FROM facelog f1 WHERE  f1.shibieleixingint IS '7' "+dataSql+" GROUP BY  f1.sfz ORDER BY  f1.shijian) f ";    
			}else if("未到考生".equals(rzresult)){				
				faceSql=" (SELECT sfz FROM facelog WHERE shibieleixingint IS '1' OR shibieleixingint IS '7' OR shibieleixingint IS '4'  OR shibieleixingint IS '5' OR shibieleixingint IS '6'  GROUP BY sfz ORDER BY  shijian DESC) ";				
			}		
		}else {//没有此条件，显示认证通过的
			faceSql=" (SELECT * FROM facelog f1 WHERE  f1.shibieleixingint IS '7' "+dataSql+" GROUP BY  f1.sfz ORDER BY  f1.shijian) f ";    
		}
		
		//拼接外层zkzdata数据库 sql和上面内层sql结合
        if(kaodian!=null&&!"".equals(kaodian)) {    	  
        	  if(!"".equals(zkzSql)) {
        		  zkzSql+=" AND  z.kd1 LIKE '%"+kaodian+"%' ";     		  
        	  }else {     		  
        		  zkzSql=" AND z.kd1 LIKE '%"+kaodian+"%' ";
        	  }
		}
		if(kaochang!=null&&!"".equals(kaochang)) {
			 if(!"".equals(zkzSql)) {
				 zkzSql+="AND z.kc1 LIKE '%"+kaochang+"%' ";	 
			 }else {
				 zkzSql=" AND z.kc1 LIKE '%"+kaochang+"%' ";
			 }
			
			
		}
		
		//拼接预备完成sql还差分页
		//未来的人，特殊处理
		if("未到考生".equals(rzresult)) {
			baseSql=" SELECT z.id, z.xingming ,z.xingbie,z.upersonnum,'无信息',z.baokaoname,z.jbname,z.kc1,z.zh1,'无信息','无信息','无信息','无信息','无信息','无信息'  FROM zkzdata z   WHERE z.upersonnum  NOT IN "+faceSql+zkzSql+zkzdataSql;
			countSql=" SELECT COUNT(*)  FROM zkzdata z  WHERE z.upersonnum  NOT IN "+faceSql+zkzSql+zkzdataSql ;
		}else if("未认证".equals(rzresult)){
			//String baseSql = "SELECT z.id, z.xingming,z.xingbie,z.upersonnum,f.changci,z.baokaoname,z.jbname,z.kc1,z.zh1,f.shijian,f.shibieleixing,f.renzcount   FROM zkzdata z  JOIN  " ;
			//未认证
			baseSql="SELECT f1.id,f1.xingming,f1.xingbie,f1.sfz,f1.changci,'未认证','未认证','未认证','未认证','未认证',f1.shijian,f1.shibieleixing,'未认证','未认证','未认证' FROM facelog f1  WHERE  f1.shibieleixingint IS '2' "+dataSql+" GROUP BY  f1.sfz ORDER BY  f1.shijian ";  
			countSql=" SELECT COUNT(*)  FROM facelog f1 WHERE  f1.shibieleixingint IS '2' "+dataSql+" GROUP BY  f1.sfz ORDER BY  f1.shijian "; 
		
		}else {
			baseSql+=(faceSql+" ON f.sfz=z.upersonnum "+zkzSql);
			//计算总条数
			countSql+=(faceSql+" ON f.sfz=z.upersonnum "+zkzSql);
		}
		
		//拼接分页
		if(currentPage>0) {
			baseSql+=" LIMIT ? ,? ";
		}
		
		System.out.println(baseSql);
		System.out.println(countSql);
		
		
		//执行查询
		List<FaceLogAndZkzResult> list=DBHelper.getResult(baseSql,new IResultHandler<List<FaceLogAndZkzResult>>() {
			@Override
			public List<FaceLogAndZkzResult> handler(ResultSet res) throws Exception {
				List<FaceLogAndZkzResult> list=new ArrayList<>();
				while(res.next()) {
					FaceLogAndZkzResult faz=new FaceLogAndZkzResult();
//					faz.setId(res.getLong("id"));
//					faz.setName(res.getString("xingming"));
//					faz.setSex(res.getString("xingbie"));
//					faz.setCardNum(res.getString("upersonnum"));
//					faz.setCourse(res.getString("changci"));
//					faz.setSubject(res.getString("baokaoname"));
//					faz.setLevel(res.getString("jbname"));
//					faz.setExamRoom(res.getString("kc1"));
//					faz.setSeatNu(res.getString("zh1"));
//					faz.setRzTime(res.getString("shijian"));
//					faz.setRzType(res.getString("shibieleixing"));
//					faz.setRzCount(res.getString("renzcount"));
					
					faz.setId(res.getLong(1));
					faz.setName(res.getString(2));
					faz.setSex(res.getString(3));
					faz.setCardNum(res.getString(4));
					faz.setCourse(res.getString(5));
					faz.setSubject(res.getString(6));
					faz.setLevel(res.getString(7));
					faz.setExamRoom(res.getString(8));
					faz.setSeatNu(res.getString(9));
					faz.setZkzNum(res.getString(10));
					faz.setRzTime(res.getString(11));
					faz.setRzType(res.getString(12));
					faz.setRzCount(res.getString(13));	
					faz.setFacePhoto(res.getString(14));
					faz.setSfzPhoto(res.getString(15));
					list.add(faz);
				}
				return list;
			}
		}, (currentPage-1)*Const.PAGESIZE,Const.PAGESIZE);
		
		
		Integer totalCount=DBHelper.getResult(countSql, new IResultHandler<Integer>() {
			@Override
			public Integer handler(ResultSet rs) throws Exception {
				if(rs.next()) {
					return rs.getInt(1);
				}
				return 0;
			}
		});
		return new PageResult(list, totalCount, currentPage);
	}
	
	
	
	@Override
	public List<Zkzdata> getFaceLogsByCondition(String rzresult, String changci, String rzcount, String startime,
			String endtime) {
		List<Zkzdata> list = new ArrayList<>();
		try {
			String tiaojian = "select zkzdata.xingming,zkzdata.upersonnum,zkzdata.zkznum,zkzdata.kd1,zkzdata.kc1,zkzdata.dd1 "
					+ "from zkzdata left join facelog on zkzdata.upersonnum = facelog.sfz " + "where facelog.changci='"
					+ changci + "' ";
			String sql = "";
			// 认证结果为空，则显示所有对应场次的信息
			if (rzresult == null || "".equals(rzresult)) {
				sql = tiaojian;
			} else if ("未认证".equals(rzresult)) {// 未认证怎么办
				if (startime == null || "".equals(startime)) {
					String datetime = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
					sql = tiaojian.substring(0, tiaojian.length() - 24) + " facelog.sfz is null and zkzdata.sj1 like '"
							+ datetime + "%' ";
				} else {
					sql = tiaojian.substring(0, tiaojian.length() - 24) + " facelog.sfz is null and zkzdata.sj1 like '"
							+ startime.substring(0, 10) + "%' ";
				}
			} else {
				if ("通过".equals(rzresult)) {// 通过的
					sql = tiaojian + " and facelog.shibieleixingint=7 and facelog.renzcount is not null ";
				} else if ("不通过".equals(rzresult)) {// 不通过的
					sql = tiaojian
							+ "and facelog.sfz not in (select distinct sfz from facelog where shibieleixingint = 7)";
				}

				if (rzcount != null && !"".equals(rzcount)) {
					sql += " and facelog.renzcount=" + rzcount + " ";
				}

				if (startime != null && !"".equals(startime)) {
					sql += " and facelog.shijian >'" + startime + "' ";
				}

				if (endtime != null && !"".equals(endtime)) {
					sql += " and facelog.shijian <'" + endtime + "' ";
				}
			}
			System.out.println(sql);

			conn = dbdao.getConn();
			res = dbdao.getResults(conn, sql);
			ResultSetMetaData resmate = res.getMetaData();
			int cols = resmate.getColumnCount();// 查询返回的行数
			while (res.next()) {
				Zkzdata zkzdata = new Zkzdata();
				for (int i = 0; i < cols; i++) {
					int g = i + 1;
					if (i == 0) {
						zkzdata.setXingming(res.getString(g));
					}
					if (i == 1) {
						zkzdata.setUpersonnum(res.getString(g));
					}
					if (i == 2) {
						zkzdata.setZkznum(res.getString(g));
					}
					if (i == 3) {
						zkzdata.setKd1(res.getString(g));
					}
					if (i == 4) {
						zkzdata.setKc1(res.getString(g));
					}
					if (i == 5) {
						zkzdata.setDd1(res.getString(g));
					}
				}
				list.add(zkzdata);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			dbdao.close(conn);
		}
		return list;
	}

	@Override
	public List<FaceLog> getRenZhengList(String cc, String card, String xm, String lx, String startime, String endtime,
			Integer start, Integer end) {
		Connection conn = DBHelper.getConn();
		List<FaceLog> loglist = new ArrayList<FaceLog>();
		PreparedStatement pstmt = null;
		try {
			String tiaojian = "";
			Integer m = 0;
			if (!"".equals(cc)) {
				if (m == 1) {
					tiaojian = tiaojian + " and  changci='" + cc + "' ";
				} else {
					tiaojian = tiaojian + " where  changci='" + cc + "' ";
					m = 1;
				}
			}
			if (!"".equals(card)) {
				if (m == 1) {
					tiaojian = tiaojian + " and  sfz='" + card + "' ";
				} else {
					tiaojian = tiaojian + " where  sfz='" + card + "' ";
					m = 1;
				}
			}
			if (!"".equals(xm)) {
				if (m == 1) {
					tiaojian = tiaojian + " and  xingming='" + xm + "' ";
				} else {
					tiaojian = tiaojian + " where  xingming='" + xm + "' ";
					m = 1;
				}
			}
			if (!"".equals(lx)) {
				if (m == 1) {
					tiaojian = tiaojian + " and  shibieleixing='" + lx + "' ";
				} else {
					tiaojian = tiaojian + " where  shibieleixing='" + lx + "' ";
					m = 1;
				}
			}
			if (!"".equals(startime)) {
				if (m == 1) {
					tiaojian = tiaojian + " and shijian>'" + startime + "' ";
				} else {
					tiaojian = tiaojian + " where shijian>'" + startime + "' ";
					m = 1;
				}
			}
			if (!"".equals(endtime)) {
				if (m == 1) {
					tiaojian = tiaojian + " and shijian<'" + endtime + "' ";
				} else {
					tiaojian = tiaojian + " where shijian<'" + endtime + "' ";
					m = 1;
				}
			}

			String sql = "select * from facelog ";

			if (!"".equals(tiaojian)) {
				sql = sql + tiaojian;
			}
			// 获取数据是从第n行到第m行，sql语句中用limit n-1, m-n(索引，长度)
			// System.out.println(beginindex +" "+end);
			if (start != null && end != null) {
				Integer beginindex = start - 1;
				sql = sql + " limit " + beginindex + " , " + end + " ";
			}

			pstmt = (PreparedStatement) conn.prepareStatement(sql);
			ResultSet res = pstmt.executeQuery();
			ResultSetMetaData resmate = res.getMetaData();
			int cols = resmate.getColumnCount();// 查询返回的列数
			while (res.next()) {
				FaceLog facelog = new FaceLog();
				for (int i = 0; i < cols; i++) {
					int g = i + 1;
					facelog.setId(Integer.parseInt(res.getString(1)));
					facelog.setSfz(res.getString(2));
					facelog.setXingming(res.getString(3));
					facelog.setXingbie(res.getString(4));
					facelog.setShibieleixing(res.getString(5));
					facelog.setShibieleixingint(res.getString(6));
					facelog.setShijian(res.getString(7));
					facelog.setRenlianphoto(res.getString(8));
					facelog.setRemarks(res.getString(9));
					facelog.setSfzphoto(res.getString(10));
					facelog.setChangci(res.getString(11));
					facelog.setDenglumana(res.getString(12));
					facelog.setRenzcount(res.getString(13));
				}
				loglist.add(facelog);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBHelper.close(conn, pstmt);
		}
		return loglist;
	}

	@Override
	public Integer getRenZhengCount(String cc, String card, String xm, String lx, String startime, String endtime) {
		Connection conn = DBHelper.getConn();
		List<FaceLog> loglist = new ArrayList<FaceLog>();
		PreparedStatement pstmt = null;
		Integer count = 0;
		try {
			String tiaojian = "";
			Integer m = 0;
			if (!"".equals(cc)) {
				if (m == 1) {
					tiaojian = tiaojian + " and  changci='" + cc + "' ";
				} else {
					tiaojian = tiaojian + " where  changci='" + cc + "' ";
					m = 1;
				}
			}
			if (!"".equals(card)) {
				if (m == 1) {
					tiaojian = tiaojian + " and  sfz='" + card + "' ";
				} else {
					tiaojian = tiaojian + " where  sfz='" + card + "' ";
					m = 1;
				}
			}
			if (!"".equals(xm)) {
				if (m == 1) {
					tiaojian = tiaojian + " and  xingming='" + xm + "' ";
				} else {
					tiaojian = tiaojian + " where  xingming='" + xm + "' ";
					m = 1;
				}
			}
			if (!"".equals(lx)) {
				if (m == 1) {
					tiaojian = tiaojian + " and  shibieleixing='" + lx + "' ";
				} else {
					tiaojian = tiaojian + " where  shibieleixing='" + lx + "' ";
					m = 1;
				}
			}
			if (!"".equals(startime)) {
				if (m == 1) {
					tiaojian = tiaojian + " and shijian>'" + startime + "' ";
				} else {
					tiaojian = tiaojian + " where shijian>'" + startime + "' ";
					m = 1;
				}
			}
			if (!"".equals(endtime)) {
				if (m == 1) {
					tiaojian = tiaojian + " and shijian<'" + endtime + "' ";
				} else {
					tiaojian = tiaojian + " where shijian<'" + endtime + "' ";
					m = 1;
				}
			}

			String sql = "select count(*) from facelog ";

			if (!"".equals(tiaojian)) {
				sql = sql + tiaojian;
			}

			pstmt = (PreparedStatement) conn.prepareStatement(sql);
			ResultSet res = pstmt.executeQuery();
			while (res.next()) {
				count = Integer.parseInt(res.getString(1));
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBHelper.close(conn, pstmt);
		}
		return count;
	}

}
