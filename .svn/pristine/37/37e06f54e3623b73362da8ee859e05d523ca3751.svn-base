package com.dx;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridLayout;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import org.opencv.core.Mat;

import com.dx.pojo.PersonCard;
import com.dx.pojo.Zkzdata;
import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.Variant;

import lombok.Getter;
import lombok.Setter;
@Getter @Setter
public class FacePhoPanel extends JPanel {
	public FacePhoPanel() {
	}
	private String shibieleixing = "" ;
	private CameraCore panel1 = null ;
	private Person person = null ;
	public JPanel getFacePhoPanel() {
		JPanel controlp = new JPanel();
		 //BoxLayout layout=new BoxLayout(controlp, BoxLayout.X_AXIS);
	
         // controlp.setLayout(new BoxLayout(controlp, BoxLayout.X_AXIS));
        // controlp.setLayout(new FlowLayout(FlowLayout.LEADING,10, 10));
		controlp.setLayout(new GridLayout(1, 2, 10, 10));
		panel1 = new CameraCore();
		//panel1.setSize(new Dimension(700,768));
		controlp.add(panel1, "panel1");
		//panel1.setBounds(0, 0, 700,600);
	
		panel1.setPreferredSize(new Dimension(800,600));
		
		JPanel panel2 = new JPanel();
		panel2.setPreferredSize(new Dimension(200,600));
		panel2.setLayout(new GridLayout(2, 1,0,10));
		controlp.add(panel2, "panel2");
	 
//		panel2.setBounds(700, 0, 700, 768);
		
//		getContentPane().add(controlp);
		
		
		JPanel panel2zuo = new JPanel();
		//panel2zuo.setBackground(new Color(34, 22, 65));
		//BoxLayout layout2=new BoxLayout(panel2,BoxLayout.Y_AXIS);
		//panel2.setLayout(new BoxLayout(panel2,BoxLayout.Y_AXIS));
		panel2.add(panel2zuo, "panel2zuo");//这里放所有的照片
		//panel2zuo.setLayout(null);
		JPanel panel2you = new JPanel();
		panel2you.setBackground(new Color(67, 87, 66));
		panel2.add(panel2you, "panel2you");//这里放准考证
		//panel2you.setLayout(null);
		
		//如果没有放身份证提示放身份证
//		if(!panel1.flag) {
//			JLabel textLabel=new JLabel("请把身份证放在读卡机上！");
//			textLabel.setFont(new Font("微软雅黑",Font.BOLD,16));
//			textLabel.setForeground(Color.red);
//			panel2zuo.add(textLabel);
//		}
//		
		
		//添加身份证阅读监听器
		JLabel label2 = new JLabel();//身份证照片
		panel2zuo.add(label2);
		label2.setBounds(200, 0, 100, 100);//放置身份证照片
		
		JLabel label = new JLabel();//现场人脸照片
		panel2zuo.add(label);
		label.setBounds(300, 0, 100,100);//固定lable的位置
		
		JLabel label3 = new JLabel();//准考证照片
		panel2zuo.add(label3);
		label3.setBounds(300, 0, 100,100);//固定lable的位置
		
		JPanel scrollPane = new JPanel();
		GridBagConstraints gridBagConstraints_8 = new GridBagConstraints();
		gridBagConstraints_8.weighty = 1.0;
		gridBagConstraints_8.gridwidth = 1;
		gridBagConstraints_8.gridy = 2;
		gridBagConstraints_8.gridx = 1;
		panel2you.add(scrollPane, gridBagConstraints_8);
		
		DefaultTableModel dftm = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row,int column){
            	return false;
            }
           
		};
		
		String[] tableHeads = new String[]{""};
		dftm.setColumnIdentifiers(tableHeads);
		//准考证如何显示
		JTable table = new JTable(dftm);
		table.setRowHeight(35);
		table.getTableHeader().setVisible(false);
		table.setShowGrid(false);
		table.setFont(new Font("Dialog", Font.PLAIN, 14));
		
		TableColumn column = table.getColumn(table.getColumnName(0));
		column.setPreferredWidth(650);
		
		List<String[]> positioins = new ArrayList<String[]>() ;
		
		JLabel text = new JLabel();
		text.setFont(new Font("Dialog", Font.BOLD, 16));
		text.setForeground(Color.red);
		panel2zuo.add(text);
		
		person = new Person();
		person.addPropertyChangeListener(new PropertyChangeListener(){  
			public void propertyChange(PropertyChangeEvent evt) {  
			//	System.out.println("1Old:"+evt.getOldValue()+"----New:"+evt.getNewValue()+"----"+evt.getPropertyName());  
				if(evt.getPropertyName().equals("ischange") && person.isIschange() == true) {
					label2.setIcon(null);
					label.setIcon(null);
					label3.setIcon(null);
					panel1.flag = true ;
					//身份证对象
					PersonCard card = person.getCard1() == null ? person.getCard2() : person.getCard2();
					panel1.card = card ;
					//身份证号
//					String upersonnum = person.getCard1() == null ? person.getCard2().getPnum() :
//						person.getCard1().getPnum();
					String upersonnum = card.getPnum();
					panel1.upersonnum = upersonnum ;
					//将身份证照片显示到页面上
//					File file = new File("D:\\eclipse\\workspace\\FaceRecongnition\\img/facezp.bmp");//身份证图像照片地址
					File file = new File("D:\\faceimages\\faceimage\\"+upersonnum+"/"+upersonnum+"zp.bmp");//身份证图像照片地址
					Image image = null;
					try {
						image = ImageIO.read(file);
					} catch (IOException e) {
						e.printStackTrace();
					}
					ImageIcon imageicon=new ImageIcon(image);
					imageicon.setImage(imageicon.getImage().getScaledInstance(100,100,Image.SCALE_DEFAULT));//固定照片大小
					label2.setIcon(imageicon);
					//如果放置身份证发生改变，清空页面的文字提醒
				//	text.setText("");
					
					
				}
				
		}});
		
		//属性值监听器
		panel1.addPropertyChangeListener(new PropertyChangeListener(){  
			public void propertyChange(PropertyChangeEvent evt) {  
				//System.out.println("2Old:"+evt.getOldValue()+"----New:"+evt.getNewValue()+"----"+evt.getPropertyName());  
				if(evt.getPropertyName().equals("filepath")) {
					String imgpath = evt.getNewValue() +"";
					//将new	图片添加到panel2中显示
					imgpath = imgpath.replaceAll("\\\\", "//");
					ImageIcon imageicon=new ImageIcon(imgpath);
					imageicon.setImage(imageicon.getImage().getScaledInstance(100,100,Image.SCALE_DEFAULT));//固定照片大小
					label.setIcon(imageicon);
					//text.setText("");
				}else if(evt.getPropertyName().equals("types")) {
					text.setText("");
					Integer c1 =dftm.getRowCount() ; 
					for(int i=0; i<c1 ;i++) {
						dftm.removeRow(0);
					}
				}else if(evt.getPropertyName().equals("shibieleixing")) {
					shibieleixing = evt.getNewValue() +"";
					//获取检验的结果并显示到页面上
					text.setText(shibieleixing);//shibieleixing
					//showSheng(shibieleixing);//语音播报结果
					//将上一张准考证显示的内容清空
					if(!"通过".equals(shibieleixing)) {
						Integer c1 =dftm.getRowCount() ; 
						for(int i=0; i<c1 ;i++) {
							dftm.removeRow(0);
						}
					}
				}else if(evt.getPropertyName().equals("zkzdata")) {
					Integer c1 =dftm.getRowCount() ; 
					for(int i=0; i<c1 ;i++) {
						dftm.removeRow(0);
					}
					
					Zkzdata zkz = (Zkzdata) evt.getNewValue() ;
					
					String imgpath = "D:\\faceimages\\zkzpho\\"+zkz.getUpersonnum()+".JPG";
					//将new	图片添加到panel2中显示
					imgpath = imgpath.replaceAll("\\\\", "//");
					ImageIcon imageicon=new ImageIcon(imgpath);
					imageicon.setImage(imageicon.getImage().getScaledInstance(100,100,Image.SCALE_DEFAULT));//固定照片大小
					label3.setIcon(imageicon);
					
					
					String[] row1 = new String[] {" 姓名："+zkz.getXingming()+"                            性别："+zkz.getXingbie()+"                           年龄："+zkz.getNianlin()} ;
					dftm.addRow(row1);
					positioins.add(row1);
					String[] row2 = new String[] {" 准考证号："+zkz.getZkznum()} ;
					dftm.addRow(row2);
					positioins.add(row2);
					String[] row3 = new String[] {" 身份证号："+zkz.getUpersonnum()} ;
					dftm.addRow(row3);
					positioins.add(row3);
					String[] row4 = new String[] {" 工作单位："+zkz.getDanweiname()} ;
					dftm.addRow(row4);
					positioins.add(row4);
					String[] row5 = new String[] {" 申报工种："+zkz.getBaokaoname()} ;
					dftm.addRow(row5);
					positioins.add(row5);
					String[] row6 = new String[] {" 申报等级："+zkz.getJbname()} ;
					dftm.addRow(row6);
					positioins.add(row6);
					
					if(!"".equals(zkz.getKc1())) {
						String[] row7 = new String[] {"                 考场："+zkz.getKd1()+""+zkz.getKc1()+"                    坐号："+zkz.getZh1()} ;
						dftm.addRow(row7);
						String[] row8 = new String[] {" 职业道德: 考试时间："+zkz.getSj1()} ;
						dftm.addRow(row8);
						String[] row9 = new String[] {"                 考试地点："+zkz.getDd1()} ;
						dftm.addRow(row9);
						positioins.add(row7);
						positioins.add(row8);
						positioins.add(row9);
					}
					if(!"".equals(zkz.getKc2())) {
						String[] row7 = new String[] {"                 考场："+zkz.getKd2()+""+zkz.getKc2()+"                    坐号："+zkz.getZh2()} ;
						dftm.addRow(row7);
						String[] row8 = new String[] {" 职业能力: 考试时间："+zkz.getSj2()} ;
						dftm.addRow(row8);
						String[] row9 = new String[] {"                 考试地点："+zkz.getDd2()} ;
						dftm.addRow(row9);
						positioins.add(row7);
						positioins.add(row8);
						positioins.add(row9);
					}
					if(!"".equals(zkz.getKc3())) {
						String[] row7 = new String[] {"                 考场："+zkz.getKd3()+""+zkz.getKc3()+"                    坐号："+zkz.getZh3()} ;
						dftm.addRow(row7);
						String[] row8 = new String[] {" 岗位技能: 考试时间："+zkz.getSj3()} ;
						dftm.addRow(row8);
						String[] row9 = new String[] {"                 考试地点："+zkz.getDd3()} ;
						dftm.addRow(row9);
						positioins.add(row7);
						positioins.add(row8);
						positioins.add(row9);
					}
					
//					for(int i=0; i<table.getRowCount(); i++){
//						if (6 == i){
//							table.setBackground(Color.YELLOW);
//						}
//					}
//					
					//EvenOddRenderer cellrender = new EvenOddRenderer(positioins);
					//table = cellrender.getTableCellRendererComponent(table,  6, 0);
				}
		}}); 
		
		
		scrollPane.add(table);
		
		//提示语
		text.setVisible(true);
		
		return controlp ;
	}
	class EvenOddRenderer extends DefaultTableCellRenderer {
		
		private static final long serialVersionUID = 1L;
		private List<String[]> positioins;
		
		public EvenOddRenderer(List<String[]> _positioins){
			this.positioins = _positioins;
		}
		
		public Component getTableCellRendererComponent(JTable table,int row, int col) {
			for(int i=0; i<table.getRowCount(); i++){
				if (row == i){
					this.setBackground(Color.yellow);
				}
			}
			for(String[] rowAndCol : this.positioins){
//				System.out.println(rowAndCol+"--------"+rowAndCol[0]+"--------"+rowAndCol[1]);
//				System.out.println(this.positioins);
				int _row= Integer.valueOf(rowAndCol[0]);
				int _col= Integer.valueOf(rowAndCol[1]);
				
				if( _row == row && _col == col) {
					this.setBackground(Color.yellow);
				}
			}
			return this;
		}
	}
	
	//语音播报
	public static void showSheng(String str) {
		ActiveXComponent sap = new ActiveXComponent("Sapi.SpVoice");
		// Dispatch是做什么的？
		Dispatch sapo = sap.getObject();
		try {
			
			// 音量 0-100
			sap.setProperty("Volume", new Variant(100));
			// 语音朗读速度 -10 到 +10
			sap.setProperty("Rate", new Variant(0));
			
			Variant defalutVoice = sap.getProperty("Voice");
			
			Dispatch dispdefaultVoice = defalutVoice.toDispatch();
			Variant allVoices = Dispatch.call(sapo, "GetVoices");
			Dispatch dispVoices = allVoices.toDispatch();
			
			Dispatch setvoice = Dispatch.call(dispVoices, "Item", new Variant(1)).toDispatch();
			ActiveXComponent voiceActivex = new ActiveXComponent(dispdefaultVoice);
			ActiveXComponent setvoiceActivex = new ActiveXComponent(setvoice);
			
			Variant item = Dispatch.call(setvoiceActivex, "GetDescription");
			// 执行朗读
			Dispatch.call(sapo, "Speak", new Variant(str));//"曾小明小朋友，早上好"
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			sapo.safeRelease();
			sap.safeRelease();
		}
	}
	
}
