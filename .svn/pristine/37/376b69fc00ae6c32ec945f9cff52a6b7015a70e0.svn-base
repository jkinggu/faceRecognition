package com.dx.service;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.dx.dao.DBHelper;
import com.dx.inter.ZkzInterface;
import com.dx.pojo.Belongfor;
import com.dx.pojo.StatisticsCon;
import com.dx.pojo.StatisticsResult;
import com.dx.pojo.Zkzdata;
import com.dx.query.IResultHandler;
import com.dx.query.PageResult;
import com.dx.util.Const;

public class ZkzInterImpl implements ZkzInterface {

	@Override
	/**
	 * 查询准考证
	 */
	public Zkzdata findByPersonnum(String Upersonnum) {
		Connection conn = DBHelper.getConn();
		String sql = "select * from zkzdata where upersonnum='" + Upersonnum + "' ";
		PreparedStatement pstmt = null;
		Zkzdata zkzdata = new Zkzdata();
		try {
			pstmt = (PreparedStatement) conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				zkzdata.setId(Integer.parseInt(rs.getString(1)));
				zkzdata.setXingming(rs.getString(2));
				zkzdata.setXingbie(rs.getString(3));
				zkzdata.setNianlin(rs.getString(4));
				zkzdata.setZkznum(rs.getString(5));
				zkzdata.setUpersonnum(rs.getString(6));
				zkzdata.setDanweiid(rs.getString(7));
				zkzdata.setDanweiname(rs.getString(8));
				zkzdata.setBaokaocode(rs.getString(9));
				zkzdata.setBaokaoname(rs.getString(10));
				zkzdata.setJbcode(rs.getString(11));
				zkzdata.setJbname(rs.getString(12));
				zkzdata.setKd1(rs.getString(13));
				zkzdata.setKc1(rs.getString(14));
				zkzdata.setZh1(rs.getString(15));
				zkzdata.setSj1(rs.getString(16));
				zkzdata.setDd1(rs.getString(17));
				zkzdata.setKd2(rs.getString(18));
				zkzdata.setKc2(rs.getString(19));
				zkzdata.setZh2(rs.getString(20));
				zkzdata.setSj2(rs.getString(21));
				zkzdata.setDd2(rs.getString(22));
				zkzdata.setKd3(rs.getString(23));
				zkzdata.setKc3(rs.getString(24));
				zkzdata.setZh3(rs.getString(25));
				zkzdata.setSj3(rs.getString(26));
				zkzdata.setDd3(rs.getString(27));
			}
			if (zkzdata.getId() == null) {
				zkzdata = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBHelper.close(conn, pstmt);
		}
		return zkzdata;
	}

	public static void main(String[] args) {
		ZkzInterface impl = new ZkzInterImpl();
		Zkzdata zkz = impl.findByPersonnum("413001196402190517");
		System.out.println(zkz);
	}

	@Override
	public Integer insertBelf(Belongfor bef,Connection conn) {
		//Connection conn = DBHelper.getConn();
		int num = 0;
		PreparedStatement pstmt = null;
		String sql = "insert into belongfor(allcode,no1code,no1,no2code,no2,no3code, no3,no4code,no4,leibie) values(?,?,?,?,?,?,?,?,?,?)";
		try {
			pstmt = (PreparedStatement) conn.prepareStatement(sql);
			pstmt.setString(1, bef.getAllcode());
			pstmt.setString(2, bef.getNo1code());
			pstmt.setString(3, bef.getNo1name());
			pstmt.setString(4, bef.getNo2code());
			pstmt.setString(5, bef.getNo2name());
			pstmt.setString(6, bef.getNo3code());
			pstmt.setString(7, bef.getNo3name());
			pstmt.setString(8, bef.getNo4code());
			pstmt.setString(9, bef.getNo4name());
			pstmt.setString(10, bef.getLeibie());

			num = pstmt.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		} 
//		finally {
//			DBHelper.close(conn, pstmt);
//		}
		return num;
	}

	@Override
	public Integer insertZkz(Zkzdata zkzdata,Connection conn) {
		//Connection conn = DBHelper.getConn();
		int num = 0;
		String sql = "insert into zkzdata(xingming,  xingbie,  nianlin, zkznum, upersonnum,danweiid,"
				+ " danweiname,  baokaocode, baokaoname,jbcode, jbname,kd1, kc1,zh1,"
				+ "sj1, dd1,kd2, kc2,  zh2, sj2, dd2,  kd3, kc3, zh3,"
				+ "sj3, dd3,  zmarks, dishiname, zkzpho, sfzpho) values("
				+ "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		PreparedStatement pstmt = null;
		try {
			pstmt = (PreparedStatement) conn.prepareStatement(sql);
			pstmt.setString(1, zkzdata.getXingming());
			pstmt.setString(2, zkzdata.getXingbie());
			pstmt.setString(3, zkzdata.getNianlin());
			pstmt.setString(4, zkzdata.getZkznum());
			pstmt.setString(5, zkzdata.getUpersonnum());
			pstmt.setString(6, zkzdata.getDanweiid());
			pstmt.setString(7, zkzdata.getDanweiname());
			pstmt.setString(8, zkzdata.getBaokaocode());
			pstmt.setString(9, zkzdata.getBaokaoname());
			pstmt.setString(10, zkzdata.getJbcode());
			pstmt.setString(11, zkzdata.getJbname());
			pstmt.setString(12, zkzdata.getKd1());
			pstmt.setString(13, zkzdata.getKc1());
			pstmt.setString(14, zkzdata.getZh1());
			pstmt.setString(15, zkzdata.getSj1());
			pstmt.setString(16, zkzdata.getDd1());
			pstmt.setString(17, zkzdata.getKd2());
			pstmt.setString(18, zkzdata.getKc2());
			pstmt.setString(19, zkzdata.getZh2());
			pstmt.setString(20, zkzdata.getSj2());
			pstmt.setString(21, zkzdata.getDd2());
			pstmt.setString(22, zkzdata.getKd3());
			pstmt.setString(23, zkzdata.getKc3());
			pstmt.setString(24, zkzdata.getZh3());
			pstmt.setString(25, zkzdata.getSj3());
			pstmt.setString(26, zkzdata.getDd3());
			pstmt.setString(27, zkzdata.getZmarks());
			pstmt.setString(28, zkzdata.getDishiname());// 导出的xml文件内包括这个
			pstmt.setString(29, zkzdata.getZkzpho());
			pstmt.setString(30, zkzdata.getSfzpho());

			num = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} 
//		finally {
//			DBHelper.close(conn, pstmt);
//		}
		return num;

	}

	

	@Override
	public List<String> getCountByCondition(String kaodian, String changci, String startime) {
		List<String> list = new ArrayList<>();
		Connection conn = DBHelper.getConn();
		PreparedStatement pstmt = null;
		try {
			StringBuffer sb = new StringBuffer();
			sb.append("select kd1,kc1,sj1 from zkzdata ");
			// "select kd1,kc1,sj1 from zkzdata where ";
			// 判断考点不为空
			if (!kaodian.isEmpty()) {
				sb.append("where kd1 = '" + kaodian + "'");
				// 判断场次不为空
				if (!changci.isEmpty()) {
					sb.append(" and kc1 = '" + changci + "'");
					// 判断日期不为空
					if (!startime.isEmpty()) {
						sb.append(" and sj1 like '" + startime + "%'");
					}
				} else {// 场次为空
					// 判断日期不为空
					if (!startime.isEmpty()) {
						sb.append(" and sj1 like '" + startime + "%'");
					}
				}
			} else {// 考点为空
				// 判断日期不为空
				if (!startime.isEmpty()) {
					sb.append(" where sj1 like '" + startime + "%'");
				}
			}
			sb.append(" group by kd1,kc1,sj1 order by sj1,kd1,kc1");

			System.out.println(sb.toString());
			// 将查询到的信息放入集合
			pstmt = (PreparedStatement) conn.prepareStatement(sb.toString());
			ResultSet rs = pstmt.executeQuery();
			List<Zkzdata> zkzdatas = new ArrayList<>();
			while (rs.next()) {
				Zkzdata zkzdata = new Zkzdata();
				zkzdata.setKd1(rs.getString(1));
				zkzdata.setKc1(rs.getString(2));
				zkzdata.setSj1(rs.getString(3));
				zkzdatas.add(zkzdata);
			}

			// 遍历集合得到认证结果
			zkzdatas.forEach(zkzdata -> {
				list.add(zkzdata.getSj1());
				list.add(zkzdata.getKd1());
				list.add(zkzdata.getKc1());
				list.addAll(this.getCountBySelect("职业道德", zkzdata.getSj1().substring(0, 10), zkzdata.getKd1(),
						zkzdata.getKc1(), conn));
				list.addAll(this.getCountBySelect("职业能力", zkzdata.getSj1().substring(0, 10), zkzdata.getKd1(),
						zkzdata.getKc1(), conn));
				list.addAll(this.getCountBySelect("岗位技能", zkzdata.getSj1().substring(0, 10), zkzdata.getKd1(),
						zkzdata.getKc1(), conn));
			});
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBHelper.close(conn, pstmt);
		}
		return list;
	}
	@Override
	public PageResult getCountByPageCondition(String kaodian, String changci, String startime, Integer currentPage) {
		StringBuffer sb = new StringBuffer();
		StringBuffer countsb=new StringBuffer();
		sb.append("select kd1,kc1,sj1 from zkzdata ");
		countsb.append("SELECT COUNT(1) FROM ");
		// 判断考点不为空
		if (!kaodian.isEmpty()) {
			sb.append(" where kd1 = '" + kaodian + "' ");
			//countsb.append(" where kd1 = '" + kaodian + "' ");
			// 判断场次不为空
			if (!changci.isEmpty()) {
				sb.append(" and kc1 = '" + changci + "'");
				//countsb.append(" and kc1 = '" + changci + "' ");
				// 判断日期不为空
				if (!startime.isEmpty()) {
					sb.append(" and sj1 like '" + startime + "%'");
					//countsb.append(" and sj1 like '" + startime + "%' ");
				}
			} else {// 场次为空
				// 判断日期不为空
				if (!startime.isEmpty()) {
					sb.append(" and sj1 like '" + startime + "%'");
					//countsb.append(" and sj1 like '" + startime + "%' ");
				}
			}
		} else {// 考点为空
			// 判断日期不为空
			if (!startime.isEmpty()) {
				sb.append(" where sj1 like '" + startime + "%' ");
				//countsb.append(" where sj1 like '" + startime + "%' ");
			}
		}
		
		sb.append(" group by kd1,kc1,sj1 order by sj1,kd1,kc1");
		countsb.append('(').append(sb.toString()).append(") z ");
		sb.append(" LIMIT ? , ? ");
         
		System.out.println(sb.toString());
        System.out.println(countsb.toString());
        Integer totalCount=DBHelper.getResult(countsb.toString(),new IntegerHandler());//总条数
        
        List<StatisticsCon> scList= DBHelper.getResult(sb.toString(), new IResultHandler<List<StatisticsCon>>() {
			@Override
			public List<StatisticsCon> handler(ResultSet rs) throws Exception {
				List<StatisticsCon> list=new ArrayList<>();
				while(rs.next()) {
					StatisticsCon sc=new StatisticsCon();
					sc.setDate(rs.getString("sj1"));
					sc.setLocation(rs.getString("kd1"));
					sc.setPlace(rs.getString("kc1"));
					list.add(sc);
				}
				return list;
			}
		}, (currentPage-1)*Const.PAGESIZE,Const.PAGESIZE);//统计查询条件集合
        List<StatisticsResult> srList=new ArrayList<>();
        for(StatisticsCon st:scList) {
        	StatisticsResult sr=new StatisticsResult();
        	sr=getStatisticByCon(st);
        	srList.add(sr);
        }
        
		return new PageResult(srList, totalCount, currentPage);
	}
	
	private StatisticsResult getStatisticByCon(StatisticsCon con) {
		StatisticsResult result=new StatisticsResult();
		result.setStatisticsCon(con);
		List<Integer> moralInfo=getCountgetCountBySelect("职业道德",con.getDate(),con.getLocation(),con.getPlace());
		result.setMoralPass(moralInfo.get(0));
		result.setMoralFail(moralInfo.get(1));
		result.setMoralUnauthorized(moralInfo.get(2));
		
		List<Integer> abilityInfo=getCountgetCountBySelect("职业能力",con.getDate(),con.getLocation(),con.getPlace());
		result.setAbilityPass(abilityInfo.get(0));
		result.setAbilityFail(abilityInfo.get(1));
		result.setAbilityUnauthorized(abilityInfo.get(2));
		
		List<Integer> skillsInfo=getCountgetCountBySelect("岗位技能",con.getDate(),con.getLocation(),con.getPlace());
		result.setSkillsPass(skillsInfo.get(0));
		result.setSkillsFail(skillsInfo.get(1));
		result.setSkillsUnauthorized(skillsInfo.get(2));
		
		return result;
		}
	
	
	/**
	 * 根据条件查询出认证统计的结果
	 * 
	 * @return
	 */
	
	private List<Integer> getCountgetCountBySelect(String km,String sj, String kd, String kc) {
				List<Integer> list=new ArrayList<>();
		// 认证通过统计结果
				String tgString = "select count(distinct zkzdata.id) from zkzdata left join facelog on zkzdata.upersonnum = facelog.sfz"
						+ " where facelog.changci = '" + km + "' and zkzdata.kd1 = '" + kd + "' and zkzdata.kc1 = '" + kc + "' "
						+ " and zkzdata.sj1 like '" + sj
						+ "%' and facelog.shibieleixing = 7 and facelog.renzcount is not null ";

				// 认证不通过统计结果
				String btgString = "select count(distinct zkzdata.id) from zkzdata left join facelog on zkzdata.upersonnum = facelog.sfz where facelog.changci = '"
						+ km + "' and zkzdata.kd1 = '" + kd + "' and zkzdata.kc1 = '" + kc + "' " + " and zkzdata.sj1 like '"
						+ sj + "%' and facelog.sfz not in (select distinct sfz from facelog where shibieleixing = 7 )";
				// 未认证
				String wrzString = "select count(distinct zkzdata.id) from zkzdata left join facelog on zkzdata.upersonnum = facelog.sfz where zkzdata.sj1 like '"
						+ sj + "%' and zkzdata.kd1 = '" + kd + "' and zkzdata.kc1 = '" + kc + "' "
						+ " and zkzdata.upersonnum not in (select distinct sfz from facelog where shijian like '" + sj
						+ "%' and changci = '" + km + "')";				
				list.add(DBHelper.getResult(tgString, new IntegerHandler()));
				list.add(DBHelper.getResult(btgString, new IntegerHandler()));
				list.add(DBHelper.getResult(wrzString, new IntegerHandler()));
				return list;		
	}
	@SuppressWarnings("resource")
	private List<String> getCountBySelect(String km, String sj, String kd, String kc, Connection conn) {
		List<String> list = new ArrayList<>();
		// 认证通过统计结果
		String tgString = "select count(distinct zkzdata.id) from zkzdata left join facelog on zkzdata.upersonnum = facelog.sfz"
				+ " where facelog.changci = '" + km + "' and zkzdata.kd1 = '" + kd + "' and zkzdata.kc1 = '" + kc + "' "
				+ " and zkzdata.sj1 like '" + sj
				+ "%' and facelog.shibieleixing = 7 and facelog.renzcount is not null ";

		// 认证不通过统计结果
		String btgString = "select count(distinct zkzdata.id) from zkzdata left join facelog on zkzdata.upersonnum = facelog.sfz where facelog.changci = '"
				+ km + "' and zkzdata.kd1 = '" + kd + "' and zkzdata.kc1 = '" + kc + "' " + " and zkzdata.sj1 like '"
				+ sj + "%' and facelog.sfz not in (select distinct sfz from facelog where shibieleixing = 7 )";
		// 未认证
		String wrzString = "select count(distinct zkzdata.id) from zkzdata left join facelog on zkzdata.upersonnum = facelog.sfz where zkzdata.sj1 like '"
				+ sj + "%' and zkzdata.kd1 = '" + kd + "' and zkzdata.kc1 = '" + kc + "' "
				+ " and zkzdata.upersonnum not in (select distinct sfz from facelog where shijian like '" + sj
				+ "%' and changci = '" + km + "')";

		PreparedStatement pstmt = null;
		try {
			// 添加认证通过统计结果
			pstmt = (PreparedStatement) conn.prepareStatement(tgString);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				list.add(rs.getInt(1) + "");
			}
			// 添加认证不通过统计结果
			pstmt = (PreparedStatement) conn.prepareStatement(btgString);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				list.add(rs.getInt(1) + "");
			}

			// 添加未认证统计结果
			pstmt = (PreparedStatement) conn.prepareStatement(wrzString);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				list.add(rs.getInt(1) + "");
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return list;
	}
	
	private class IntegerHandler implements IResultHandler<Integer>{
	@Override
		public Integer handler(ResultSet rs) throws Exception {
			  if(rs.next()) {
				  return rs.getInt(1);
			  }
			  return 0;
		}	 
	}
	/**
	 * 所有的准考证信息
	 * */
	@Override
	public List<Zkzdata> getZkzList() {
		Connection conn = DBHelper.getConn();
		List<Zkzdata> zkzlist = new ArrayList<Zkzdata>();
		PreparedStatement pstmt = null;
		try {
			String sql = "select * from zkzdata " ;
			pstmt = (PreparedStatement) conn.prepareStatement(sql);
			ResultSet res = pstmt.executeQuery();
			ResultSetMetaData resmate = res.getMetaData();
			int cols = resmate.getColumnCount();// 查询返回的列数
			while (res.next()) {
				Zkzdata zkz = new Zkzdata();
				for (int i = 0; i < cols; i++) {
					int g = i + 1;
					zkz.setId(Integer.parseInt(res.getString(1)));
					zkz.setXingming(res.getString(2));
					zkz.setXingbie(res.getString(3));
					zkz.setNianlin(res.getString(4));
					zkz.setZkznum(res.getString(5));
					zkz.setUpersonnum(res.getString(6));
					zkz.setDanweiid(res.getString(7));
					zkz.setDanweiname(res.getString(8));
					zkz.setBaokaocode(res.getString(9));
					zkz.setBaokaoname(res.getString(10));
					zkz.setJbcode(res.getString(11));
					zkz.setJbname(res.getString(12));
					zkz.setKd1(res.getString(13));
					zkz.setKc1(res.getString(14));
					zkz.setZh1(res.getString(15));
					zkz.setSj1(res.getString(16));
					zkz.setDd1(res.getString(17));
					
					zkz.setKd2(res.getString(18));
					zkz.setKc2(res.getString(19));
					zkz.setZh2(res.getString(20));
					zkz.setSj2(res.getString(21));
					zkz.setDd2(res.getString(22));
					
					zkz.setKd3(res.getString(23));
					zkz.setKc3(res.getString(24));
					zkz.setZh3(res.getString(25));
					zkz.setSj3(res.getString(26));
					zkz.setDd3(res.getString(27));
					zkz.setZmarks(res.getString(28));
					zkz.setDishiname(res.getString(29));
					zkz.setZkzpho(res.getString(30));
					zkz.setSfzpho(res.getString(31));
				}
				zkzlist.add(zkz);
			}
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBHelper.close(conn, pstmt);
		}
		
		
		
		
		return zkzlist;
	}
   
}
